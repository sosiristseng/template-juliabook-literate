name: Build notebooks and publish

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VER: '3.11'

jobs:
  execute:
    name: Execute notebooks
    runs-on: ubuntu-latest
    env:
      NPROC: '2'       # Number of Julia processes to run the notebooks
      JULIA_CACHE: '1' # Set this env var zero to disable caching
      GKSwstype: 100
      JULIA_NUM_THREADS: 'auto'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
      - name: Install Python dep
        run: pip install -r requirements.txt
      - name: Read Julia version
        id: read_toml
        run: |
          echo "JULIA_VER=$(python read_toml.py)" | tee -a "$GITHUB_ENV"
      - name: Setup Julia ${{ env.JULIA_VER }}
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ env.JULIA_VER }}
      - name: Restore Julia dependencies
        id: restore-cache
        uses: actions/cache/restore@v3
        if: ${{ env.JULIA_CACHE != '0'}}
        with:
          path: |
            ~/.julia
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-${{ hashFiles('Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-
      - name: Install Julia dependencies
        run: |
          julia --color=yes -e --project="" 'import Pkg; Pkg.Registry.update(); Pkg.add(["Literate", "PrettyTables"])'
          julia --color=yes -e --project=@. 'import Pkg; Pkg.instantiate(); Pkg.resolve(); Pkg.precompile(); Pkg.gc()'
      - name: Save Julia dependencies
        uses: actions/cache/save@v3
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' && env.JULIA_CACHE != '0' }}
        with:
          path: |
            ~/.julia
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
      - name: Build notebooks with ${{ env.NPROC }} processes
        run: JULIA_PROJECT=@. julia --color=yes -p ${{ env.NPROC }} literate.jl
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: notebooks
          path: docs

  jupyter-book:
    name: Jupyter Book
    runs-on: ubuntu-latest
    needs: execute
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Remove existing docs folder
        run: rm -rf docs || true
      - name: Download built notebooks to replace the original
        uses: actions/download-artifact@v3
        with:
          name: notebooks
          path: docs/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: docs/
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: .github/requirements.txt  # this is optional
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        # the package installation will only be executed when the
        # requirements-files have changed.
      - name: Install Python dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pip install -r .github/requirements.txt
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build website
        run: jupyter-book build docs
      - name: Upload artifact for GH pages
        uses: actions/upload-pages-artifact@v1
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          path: docs/_build/html

  deploy:
    name: Deploy to GitHub pages
    needs: jupyter-book
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
