name: Build notebooks and publish

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VER: '3.11'

jobs:
  execute:
    name: Execute literate notebooks
    runs-on: ubuntu-latest
    env:
      NPROC: '2'
      JULIA_CACHE: '3'
    container:
      image: julia:1.8.5
      env:
        GKSwstype: 100
        Python: ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Restore Julia dependencies
        id: restore-cache
        uses: actions/cache/restore@v3
        if: ${{ env.JULIA_CACHE != '0'}}
        with:
          path: ~/.julia
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-${{ hashFiles('*.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-
      - name: Install Julia dependencies
        run: |
          JULIA_PROJECT="" julia --color=yes -e 'import Pkg; Pkg.Registry.update(); Pkg.add(["Literate", "PrettyTables"])'
          JULIA_PROJECT=@. julia --color=yes -e 'import Pkg; Pkg.instantiate(); Pkg.resolve(); Pkg.precompile(); Pkg.gc()'
          JULIA_PROJECT=@. julia --color=yes -e 'import Pkg; if any(x -> x.name == "PyPlot", values(Pkg.dependencies())) import PyPlot; end'
      - name: Save Julia dependencies
        uses: actions/cache/save@v3
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' && env.JULIA_CACHE != '0' }}
        with:
          path: ~/.julia
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
      - name: Build notebooks with ${{ env.NPROC }} processes
        run: JULIA_PROJECT=@. julia --color=yes -p ${{ env.NPROC }} literate.jl
      - name: Upload built notebooks
        uses: actions/upload-artifact@v3
        with:
          name: notebooks
          path: docs
          retention-days: 1

  jupyter-book:
    name: Jupyter Book
    needs: execute
    runs-on: ubuntu-latest
    # output success flag for CI
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download built notebooks
        uses: actions/download-artifact@v3
        with:
          name: notebook
          path: out/
      - name: Copy back built notebooks
        run: cp --verbose -rf out/docs/* docs/
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: .github/requirements.txt  # this is optional
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        # the package installation will only be executed when the
        # requirements-files have changed.
      - name: Install Python dependencies
        run: pip install -r .github/requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      - name: Build website
        run: jupyter-book build docs/
      - name: Upload artifact for GH pages
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/_build/html/
      - name: Set output flag
        id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  binder:
    name: Build binder image
    needs: jupyter-book
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      packages: write
      contents: write
      pull-requests: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}:binder
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
      - name: Remove existing binder dockerfile and docs folder
        run: |
          rm -rf .binder || true
          rm -rf docs || true
      - name: Download built notebooks to replace the original
        uses: actions/download-artifact@v3
        with:
          name: notebooks
          path: docs/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: docs/
      - name: Install repo2docker
        run: |
          pip install -U pip setuptools wheel
          pip install https://github.com/jupyterhub/repo2docker/archive/main.zip
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Image
        run: docker pull ${{ env.IMAGE_NAME }} || true
      - name: Build binder image with repo2docker
        run: >
          jupyter-repo2docker
          --user-id 1000 --user-name jovyan
          --image-name ${{ env.IMAGE_NAME }}
          --cache-from ${{ env.IMAGE_NAME }}
          --push --no-run
          .
      - name: Add binder Dockerfile
        run: |
          mkdir -p .binder
          echo "FROM ${{ env.IMAGE_NAME }}" > .binder/Dockerfile
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          title: Binder dockerfile update
          branch: binderfile
          add-paths: |
            .binder/Dockerfile

  deploy:
    name: Deploy to GitHub pages
    needs: jupyter-book
    if: ${{ github.ref == 'refs/heads/main'}}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
